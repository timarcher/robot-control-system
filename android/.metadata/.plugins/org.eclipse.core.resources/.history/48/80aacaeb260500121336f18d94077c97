package com.example.demo_ioio_motor_interface;


import android.graphics.Color;
import android.os.Bundle;
import android.view.Menu;
import android.widget.TextView;
import android.widget.ToggleButton;

import ioio.lib.api.AnalogInput;
import ioio.lib.api.DigitalInput;
import ioio.lib.api.DigitalOutput;
import ioio.lib.api.PwmOutput;
import ioio.lib.api.exception.ConnectionLostException;
import ioio.lib.util.android.IOIOActivity;
import ioio.lib.util.BaseIOIOLooper;
import ioio.lib.util.IOIOLooper;

/**
 * This is the main activity of the IOIO Robot Motor Control demo application.
 * 
 * It is used to interface with a Magnevation motor driver board.
 * 
 * Magnevation Motor Driver Board Notes:
 * Motor Driver Board Controls and Component Connections
 * 
 * Pinout when looking at the Magnevation board from above.
 * 39                  1
 * --------------------
 * --------------------
 * 40                  2
 * 
 *                       Motor Board
 * Function					Pin				IOIO Pin
 * -----------------------------------------------------
 * Right Direction			36					9
 * Right Brake				40					11
 * Right Speed				29					7
 * Right Thermal Flag		32					13
 * Right Current Sensing	7					32
 * 
 * Left Direction			34					8
 * Left Brake				38					10
 * Left Speed				27					6
 * Left Thermal Flag		30					12
 * Left Current Sensing		9					31
 * 
 * Right Encoder(1)			14
 * Right Encoder(2)			16
 * Left Encoder(1)			18
 * Left Encoder(2)			20
 * 
 * 
 * To enable current sensing, jumper R10 and R11
 * To enable the thermal flags, jumper R2 and R3
 * To enable the motor driver board to power the OOPIC, jumper R13
 * 
 * 
 * 
 * '''''''''''''''''''' LMD18200 Notes ''''''''''''''''''''''''' 
 * The LMD18200 is a 3A H-Bridge designed for motion control applications. 
 * The device is built using a multi-technology process which combines 
 * bipolar and CMOS control circuitry with DMOS power devices on the same 
 * monolithic structure. Ideal for driving DC and stepper motors; the 
 * LMD18200 accommodates peak output currents up to 6A. An innovative 
 * circuit which facilitates low-loss sensing of the output current has 
 * been implemented.
 * 
 * Delivers up to 3A continuous output 
 * Operates at supply voltages up to 55V 
 * Low RDS(ON) typically 0.3Ohm per switch 
 * TTL and CMOS compatible inputs 
 * No "shoot-through" current 
 * Thermal warning flag output at 145°C 
 * Thermal shutdown (outputs off) at 170°C 
 * Internal clamp diodes 
 * Shorted load protection 
 * Internal charge pump with external bootstrap capability   
 * 
 */
/**
 * This is the main activity of the HelloIOIO example application.
 * 
 * It displays a toggle button on the screen, which enables control of the
 * on-board LED. This example shows a very simple usage of the IOIO, by using
 * the {@link IOIOActivity} class. For a more advanced use case, see the
 * HelloIOIOPower example.
 */
public class MainActivity extends IOIOActivity {		
		
	TextView txtIoioStatus;
	private ToggleButton button_;

	/**
	 * Called when the activity is first created. Here we normally initialize
	 * our GUI.
	 */
	@Override
	public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
        setContentView(R.layout.activity_main);
        
        button_ = (ToggleButton) findViewById(R.id.button);
	}
    
	/**
	 * This is the thread on which all the IOIO activity happens. It will be run
	 * every time the application is resumed and aborted when it is paused. The
	 * method setup() will be called right after a connection with the IOIO has
	 * been established (which might happen several times!). Then, loop() will
	 * be called repetitively until the IOIO gets disconnected.
	 */
	class Looper extends BaseIOIOLooper {
		/** The on-board LED. */
		private DigitalOutput led_;
		
		/** Left motor control pins. */
/*		
		private PwmOutput leftMotorPwm;
		private DigitalOutput leftMotorDirection;
		private DigitalOutput leftMotorBrake;
		private DigitalInput leftMotorThermalFlag;
		private AnalogInput leftMotorCurrent;
*/
		
		/** Right motor control pins. */
/*		
		private PwmOutput rightMotorPwm;
		private DigitalOutput rightMotorDirection;
		private DigitalOutput rightMotorBrake;
		private DigitalInput rightMotorThermalFlag;
		private AnalogInput rightMotorCurrent;
*/		
		
		/**
		 * Called every time a connection with IOIO has been established.
		 * Typically used to open pins.
		 * 
		 * @throws ConnectionLostException
		 *             When IOIO connection is lost.
		 * 
		 * @see ioio.lib.util.AbstractIOIOActivity.IOIOThread#setup()
		 */
		@Override
		protected void setup() throws ConnectionLostException {
			led_ = ioio_.openDigitalOutput(0, true);

		}

		/**
		 * Called repetitively while the IOIO is connected.
		 * 
		 * @throws ConnectionLostException
		 *             When IOIO connection is lost.
		 * 
		 * @see ioio.lib.util.AbstractIOIOActivity.IOIOThread#loop()
		 */
		@Override
		public void loop() throws ConnectionLostException {
			led_.write(!button_.isChecked());
			try {
				Thread.sleep(100);
			} catch (InterruptedException e) {
			}
		}
	}

	/**
	 * A method to create our IOIO thread.
	 * 
	 * @see ioio.lib.util.AbstractIOIOActivity#createIOIOThread()
	 */
	@Override
	protected IOIOLooper createIOIOLooper() {
		return new Looper();
	}
}